package com.abnamro.coao.clientadministrationapp.config;

import com.abnamro.coao.clientadministrationapp.client.cyberark.CyberArkConnectionConfiguration;
import com.abnamro.coao.clientadministrationapp.client.zos.BCDetailsZosConnectionConfiguration;
import com.abnamro.https.client.SSL;
import com.abnamro.https.client.impl.HttpsClientProvider;
import feign.RequestInterceptor;
import org.apache.http.conn.ssl.DefaultHostnameVerifier;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.impl.client.CloseableHttpClient;
import org.slf4j.MDC;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;

import java.io.IOException;
import java.security.GeneralSecurityException;

/**
 * This Configuration class separate from main application class to enable feign clients. <br>
 * It is advice to keep EnableFeignClient separate from main application class due to that a separate configuration
 * class is created.
 */
@Configuration
public class EnableFeignConfiguration {

  private static final String ABNAMRO_STANDARD_TRACE_ID = "Trace-Id";
  private static final String MDC_TRACE_ID = "TRACE-ID";

  @Autowired
  private COASSLContextProducer coasslContextProducer;


  /**
   * requestInterceptorForTraceId bean intercept the request and add Trace-Id header to it, before it makes call to
   * downstream systems
   * 
   * @return RequestInterceptor bean
   */
  @Bean
  public RequestInterceptor requestInterceptorForTraceId() {
    return (requestTemplate) -> {
      requestTemplate.header(ABNAMRO_STANDARD_TRACE_ID, MDC.get(MDC_TRACE_ID));
    };
  }

  @SSL
  @Bean("zos")
  @Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)
  public CloseableHttpClient getPooledClientForZOS(BCDetailsZosConnectionConfiguration bcDetailsZosConnectionConfiguration) throws GeneralSecurityException, IOException {
    SSLConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(coasslContextProducer.sslConnectionSocketFactory(), new DefaultHostnameVerifier());
    return HttpsClientProvider.getHttpsClient(sslSocketFactory, bcDetailsZosConnectionConfiguration, true);
  }

    @SSL
	@Bean("cyberark")
	@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)
	public CloseableHttpClient getPooledClientForCyberArk(CyberArkConnectionConfiguration cyberArkConnectionConfiguration) throws GeneralSecurityException, IOException {
    	SSLConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(coasslContextProducer.sslConnectionSocketFactory(),new DefaultHostnameVerifier());
		return HttpsClientProvider.getHttpsClient(sslSocketFactory, cyberArkConnectionConfiguration, true);
	}


  /*@SSL
  @Bean("zos")
  @Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)
  public CloseableHttpClient getPooledClientForZOS(BCDetailsZosConnectionConfiguration bcDetailsZosConnectionConfiguration
                                                   KeyVaultSSLContextProducer keyVaultSSLContextProducer) throws GeneralSecurityException, IOException {
    SSLConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(
            keyVaultSSLContextProducer.socketFactory(), new DefaultHostnameVerifier());
    return HttpsClientProvider.getHttpsClient(sslSocketFactory, bcDetailsZosConnectionConfiguration, true);
  }*/


   /*@SSL
	@Bean("cyberark")
	@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)
	public CloseableHttpClient getPooledClientForCyberArk(
			CyberArkConnectionConfiguration cyberArkConnectionConfiguration,
			KeyVaultSSLContextProducer keyVaultSSLContextProducer) throws GeneralSecurityException, IOException {
    	SSLConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(
    	        keyVaultSSLContextProducer.socketFactory(cyberArkConnectionConfiguration.getCertificateAlias()),
    	        new DefaultHostnameVerifier());
		return HttpsClientProvider.getHttpsClient(sslSocketFactory, cyberArkConnectionConfiguration, true);
	}*/
}






===========================================================================================================================================================================




package com.abnamro.coao.clientadministrationapp.config;

import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.net.ssl.*;
import java.io.File;
import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
@Configuration
public class COASSLContextProducer {

    @Bean
    public SSLContext sslConnectionSocketFactory() {
        SSLContext sslContext = null;
        try {
            KeyStore clientStore = KeyStore.getInstance("PKCS12");
            clientStore.load(new FileInputStream(new File("C://Users//B18438//IdeaProjects//coao-administration-app//src//main//resources//dev//coao01-d-plekv-coao01-d-rg-certificate-20240313.pfx")), "".toCharArray());
            KeyManagerFactory kmf = KeyManagerFactory
                    .getInstance(KeyManagerFactory.getDefaultAlgorithm());
            kmf.init(clientStore, "".toCharArray());
            KeyManager[] kms = kmf.getKeyManagers();
            sslContext = SSLContext.getInstance("TLS");
            sslContext.init(kms, getTrustAll(), new SecureRandom());
            SSLContext.setDefault(sslContext);
            new SSLConnectionSocketFactory(sslContext);
        } catch (Exception e) {

        }
        return sslContext;
    }

    static TrustManager[] getTrustAll() {
        return new TrustManager[]{
                new X509TrustManager() {
                    public X509Certificate[] getAcceptedIssuers() {
                        return new X509Certificate[0];
                    }

                    @Override
                    public void checkClientTrusted(
                            X509Certificate[] certs, String authType) {
                        // Trust Client Certificate.
                    }

                    @Override
                    public void checkServerTrusted(
                            X509Certificate[] certs, String authType) {
                        // Trust Client Certificate.
                    }
                }};
    }
}



================================================================================================================================




package com.abnamro.coao.clientadministrationapp.client.zos;

import com.abnamro.coao.clientadministrationapp.client.cyberark.CyberArkFeignClient;
import com.abnamro.coao.clientadministrationapp.client.cyberark.interfaces.ZosUserDetails;
import feign.Client;
import feign.RequestInterceptor;
import feign.RequestTemplate;
import feign.httpclient.ApacheHttpClient;
import jakarta.inject.Inject;
import org.apache.http.client.HttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.nio.charset.StandardCharsets;
import java.util.Base64;


/**
 * FeignConfiguration class which injects HttpClient reference for making http connection.
 *
 */
@Configuration
public class BCDetailsZosFeignConfiguration {

	//@Autowired
	//private CyberArkFeignClient cyberArkFeignClient;


	@Inject
	@Qualifier("zos")
	private HttpClient httpsClient;



	@Bean
	public Client zosClient() throws Exception {
		return new ApacheHttpClient(httpsClient);
	}
	
	@ConditionalOnProperty(
			prefix = "aab.zos",
			value = {"basic-authentication.enabled"},
			havingValue = "true")
	@Bean
	RequestInterceptor basicAuthRequestInterceptor() {
		return new RequestInterceptor() {
            @Override
            public void apply(RequestTemplate template) {
            	//ZosUserDetails zOSDetails = cyberArkFeignClient.getZosUserDetails();
				ZosUserDetails zOSDetails = ZosUserDetails.builder().zosUserName("U#COOSZC").zosPassword("x5e910mx").build();
        		String headerValue = "Basic " + base64Encode((((ZosUserDetails) zOSDetails).getZosUserName() + ":"
        		+ zOSDetails.getZosPassword()).getBytes(StandardCharsets.ISO_8859_1));
        		template.header("Authorization", headerValue);
            }
        };
	}
	
	private static String base64Encode(byte[] bytes) {
		return Base64.getEncoder().encodeToString(bytes);
	}
}




=====================================================================================================================================================================



package com.abnamro.coao.clientadministrationapp.client.zos;


import com.abnamro.coao.clientadministrationapp.client.zos.interfaces.bcdb.custinfo.response.MG271AFetchCustResponse;
import com.abnamro.coao.clientadministrationapp.client.zos.interfaces.bcdb.updatecustomer.request.MG786T01AUpdateRequest;
import com.abnamro.coao.clientadministrationapp.client.zos.interfaces.bcdb.updatecustomer.response.MG786T01AUpdateResponse;
import feign.Headers;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;


/**
 * BCDetailsZosFeignClient: It facilitates communication with MG786T01A over ZOS API.
 */
@Component
@FeignClient(value = "${aab.zos.name}", url = "${aab.zos.url}",
    configuration = BCDetailsZosFeignConfiguration.class ,primary = false)
public interface BCDetailsZosFeignClient {

  /**
   * Update Client status from MG786 over ZOS api.
   *
   *
   * @return BCDBCustomerUpdateResponse
   */
  @PostMapping(value = "/mg786t01a-update-minor-to-natural/",produces = "application/json", consumes = "application/json")
  @Headers({"Accept: application/json"})
  MG786T01AUpdateResponse updateMinorToNatural(String customerId);

  @PostMapping(value = "/mg271t01a-READ-BC/",produces = "application/json", consumes = "application/json")
  @Headers({"Accept: application/json"})
  MG271AFetchCustResponse getCustomer(String customerId);
}

================================================================================================================================================================
















